# -*- coding: utf-8 -*-
"""clase12_Libro_color_picker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19inb0BQBFeMAKi8Uo2XbKP5bxou8xMuq

#Importar Librerias Básicas
"""

import ipywidgets as widgets
from IPython.display import display, HTML
import numpy as np
from google.colab import drive

"""#Montar Drive"""

# Instale Google Drive para tener acceso a los archivos
drive.mount('/content/gdrive')

# Insertar  módulo
import sys
path_to_module = '/content/gdrive/My Drive/Colab Notebooks/Libro/'
sys.path.append(path_to_module)
from ip_functions import *

"""#Mostrar el Color en HTML"""

from IPython.display import display, HTML

def show_color(color):
    # Asegurarse de que el color esté en mayúsculas
    upper_color = color.upper()


    html_content = f'''
    <div style="
        background-color: {upper_color};
        width: 200px;
        height: 200px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: Arial, sans-serif;
        color: white;
        border: 2px solid black;
    ">
        {upper_color}
    </div>
    '''
    display(HTML(html_content))

"""# El Modelo de Color RGB

## ¿Qué es RGB?

RGB es un modelo de color **aditivo** usado en dispositivos electrónicos como pantallas, monitores y cámaras digitales. Se basa en la mezcla de luz de tres colores primarios:

- **R**ojo
- **G**reen (Verde)
- **B**lue (Azul)

## Cómo Funciona

1. Cada color primario se representa como un canal separado.
2. La combinación de estos tres canales en diferentes intensidades produce una amplia gama de colores.
3. Cuando los tres canales están al máximo, se produce el blanco.
4. Cuando los tres canales están al mínimo, se produce el negro.

## Valores Típicos

En un sistema de 8 bits por canal, cada componente (R, G, B) puede tener un valor entre 0 y 255 con enteros (0 y 1 para double).

- **0**: Ausencia total del color
- **255**: Intensidad máxima del color

### Ejemplos de Colores

| Color   | Valores RGB     | Descripción               |
|---------|-----------------|---------------------------|
| Rojo    | RGB(255, 0, 0)  | Rojo puro                 |
| Verde   | RGB(0, 255, 0)  | Verde puro                |
| Azul    | RGB(0, 0, 255)  | Azul puro                 |
| Blanco  | RGB(255, 255, 255) | Todos los canales al máximo |
| Negro   | RGB(0, 0, 0)    | Todos los canales al mínimo |
| Amarillo| RGB(255, 255, 0)| Mezcla de rojo y verde    |
| Magenta | RGB(255, 0, 255)| Mezcla de rojo y azul     |
| Cian    | RGB(0, 255, 255)| Mezcla de verde y azul    |
| Gris    | RGB(128, 128, 128) | Todos los canales a mitad |

## Rango de Colores

- Con 8 bits por canal, cada canal puede tener 256 valores diferentes (0-255).
- Esto resulta en 256 x 256 x 256 = 16,777,216 colores posibles.

## Usos Comunes

El modelo RGB se utiliza ampliamente en:

- Gráficos por computadora
- Diseño web
- Procesamiento de imágenes
- Pantallas digitales

---

*Nota: Este modelo es la base de la mayoría de las tecnologías de visualización digital actuales.*
"""

# @title Selector de RGB {"run":"auto","vertical-output":true}
R = 255 # @param {"type":"slider","min":0,"max":255,"step":1}
G = 255 # @param {"type":"slider","min":0,"max":255,"step":1}
B = 0 # @param {"type":"slider","min":0,"max":255,"step":1}

color_hex = "#{:02x}{:02x}{:02x}".format(int(R), int(G), int(B))
color_rgb = "rgb({},{},{})".format(R, G, B)

# Mostrar el color
show_color(color_rgb)

print(f"Valores RGB: R={R}, G={G}, B={B}")
print(f"Color Hexadecimal: {color_hex}")

"""# El Modelo de Color HSV

## ¿Qué es HSV?

HSV es un modelo de color que representa los colores en términos de tres componentes:

- **H**ue (Matiz)
- **S**aturation (Saturación)
- **V**alue (Valor o Brillo)

Este modelo está diseñado para ser más intuitivo y cercano a cómo los humanos perciben y describen el color.

## Cómo Funciona

1. **Hue (Matiz)**: Representa el tipo de color y se mide en grados (0° a 360°).
2. **Saturation (Saturación)**: Indica la pureza o intensidad del color (0% a 100%).
3. **Value (Valor)**: Representa el brillo del color (0% a 100%).

## Valores Típicos

En muchos sistemas computacionales, los valores de HSV se normalizan para facilitar su procesamiento:

- **Hue**: 0 a 1 (equivalente a 0° a 360°)
- **Saturation**: 0 a 1 (equivalente a 0% a 100%)
- **Value**: 0 a 1 (equivalente a 0% a 100%)

### Ejemplos de Colores
| Color   | Valores HSV (Normalizados) | Valores HSV (Grados, %) | Valores RGB     | Descripción               |
|---------|----------------------------|-------------------------|-----------------|---------------------------|
| Rojo    | H:0, S:1, V:1              | H:0°, S:100%, V:100%    | RGB(255, 0, 0)  | Rojo puro y brillante     |
| Verde   | H:0.33, S:1, V:1           | H:120°, S:100%, V:100%  | RGB(0, 255, 0)  | Verde puro y brillante    |
| Azul    | H:0.67, S:1, V:1           | H:240°, S:100%, V:100%  | RGB(0, 0, 255)  | Azul puro y brillante     |
| Blanco  | H:0, S:0, V:1              | H:0°, S:0%, V:100%      | RGB(255, 255, 255) | Blanco puro            |
| Negro   | H:0, S:0, V:0              | H:0°, S:0%, V:0%        | RGB(0, 0, 0)    | Negro puro                |
| Amarillo| H:0.17, S:1, V:1           | H:60°, S:100%, V:100%   | RGB(255, 255, 0)| Amarillo puro y brillante |
| Magenta | H:0.83, S:1, V:1           | H:300°, S:100%, V:100%  | RGB(255, 0, 255)| Magenta puro y brillante  |
| Cian    | H:0.5, S:1, V:1            | H:180°, S:100%, V:100%  | RGB(0, 255, 255)| Cian puro y brillante     |
| Gris    | H:0, S:0, V:0.5            | H:0°, S:0%, V:50%       | RGB(128, 128, 128) | Gris medio            |


1. **Intuitividad**: El modelo HSV se alinea más estrechamente con cómo los humanos perciben y describen el color.
2. **Separación de Componentes**: Permite ajustar el tono, la saturación y el brillo de forma independiente.
3. **Facilidad de Uso**: Es particularmente útil en interfaces de usuario para selección de colores.
4. **Transformaciones de Color**: Facilita operaciones como el ajuste de brillo o saturación sin cambiar el tono.

## Usos Comunes

El modelo HSV se utiliza ampliamente en:

- Interfaces de usuario para selección de colores
- Procesamiento y análisis de imágenes
- Diseño gráfico y artístico
- Aplicaciones de edición de fotos y video
- Sistemas de iluminación y control de color


*Nota: HSV es particularmente útil cuando se necesita manipular el color de una manera que se alinee con la percepción humana del color. Sin embargo, no es perceptualmente uniforme como CIELab, lo que significa que cambios iguales en los valores no siempre resultan en cambios perceptuales iguales.*
"""

# @title Selector de HSV {"run":"auto","vertical-output":true}
H = 0.17 # @param {"type":"slider","min":0,"max":1,"step":0.01}
S = 1 # @param {"type":"slider","min":0,"max":1,"step":0.01}
V = 1 # @param {"type":"slider","min":0,"max":1,"step":0.01}

HSV = np.array([[[H, S, V]]])
RGB=hsv2rgb(HSV)
R = RGB[0,0,0]
G= RGB[0,0,1]
B= RGB[0,0,2]

color_hex = "#{:02x}{:02x}{:02x}".format(int(R), int(G), int(B))
color_rgb = "rgb({},{},{})".format(R, G, B)

# Mostrar el color
show_color(color_rgb)


print(f"Valores RGB: R={R}, G={G}, B={B}")
print(f"Color Hexadecimal: {color_hex}")

"""# El Modelo de Color CIELab

## ¿Qué es CIELab?

CIELab es un modelo de color diseñado para aproximarse a la visión humana. Fue desarrollado por la Comisión Internacional de Iluminación (CIE) y representa los colores usando tres valores:

- **L**: Luminosidad
- **a**: Posición entre rojo y verde
- **b**: Posición entre amarillo y azul

Este modelo está diseñado para ser perceptualmente uniforme, lo que significa que la misma cantidad de cambio numérico en los valores corresponde a la misma cantidad de cambio percibido visualmente.

## Cómo Funciona

1. **L (Luminosidad)**: Representa el brillo del color (0 a 100).
2. **a (Eje rojo-verde)**: Valores mayores a 50 indican rojo, menores a 50 indican verde (0 a 100).
3. **b (Eje amarillo-azul)**: Valores mayores a 50 indican amarillo, menores a 50 indican azul (0 a 100).

## Valores Típicos

- **L**: 0 (negro) a 100 (blanco)
- **a**: 0 (verde máximo) a 100 (rojo máximo), con 50 siendo neutral
- **b**: 0 (azul máximo) a 100 (amarillo máximo), con 50 siendo neutral

### Ejemplos de Colores

## Valores Típicos

- **L**: 0 (negro) a 100 (blanco)
- **a**: -128 (verde) a +127 (rojo)
- **b**: -128 (azul) a +127 (amarillo)

### Ejemplos de Colores Ajustados

| Color   | Valores CIELab       | Valores RGB (aprox.) | Descripción               |
|---------|----------------------|----------------------|---------------------------|
| Rojo    | L:53, a:80, b:67     | RGB(255, 0, 0)       | Rojo vivo                 |
| Verde   | L:88, a:-86, b:83    | RGB(0, 255, 0)       | Verde brillante           |
| Azul    | L:32, a:79, b:-107   | RGB(0, 0, 255)       | Azul profundo             |
| Blanco  | L:100, a:0, b:0      | RGB(255, 255, 255)   | Blanco puro               |
| Negro   | L:0, a:0, b:0        | RGB(0, 0, 0)         | Negro puro                |
| Amarillo| L:97, a:-21, b:95     | RGB(255, 255, 0)     | Amarillo brillante        |
| Magenta | L:60, a:98, b:-61    | RGB(255, 0, 255)     | Magenta vivo              |
| Cian    | L:91, a:-46, b:-16   | RGB(0, 255, 255)     | Cian brillante            |
| Gris    | L:50, a:0, b:0       | RGB(128, 128, 128)   | Gris medio                |

**Perceptualmente Uniforme**: Cambios iguales en los valores producen cambios perceptualmente iguales en el color.
**Separación de Luminosidad**: El componente L permite manipular la luminosidad independientemente del color.
**Rango de Valores**: 'a' y 'b' pueden ser positivos o negativos, permitiendo una representación precisa de la oposición de colores.            |

**Separación de Luminosidad**: El componente L permite manipular la luminosidad independientemente del color.

**Punto Neutral**: Los valores a=50 y b=50 representan un punto neutral (sin tinte de color).

## Usos Comunes

El modelo CIELab se utiliza ampliamente en:

- Gestión profesional del color
- Industria de la impresión y textil
- Investigación científica sobre el color
- Análisis de diferencias de color
- Software de edición de imágenes de alta gama

---

*Nota: Esta representación de CIELab con valores de 0 a 100 para 'a' y 'b' es una variante que mantiene la esencia del modelo original, pero puede ser más fácil de entender y usar en ciertas aplicaciones.*
"""

# @title Selector de CieLAB {"run":"auto","vertical-output":true}
L = 53 # @param {"type":"slider","min":0,"max":100,"step":1}
a = 80 # @param {"type":"slider","min":-100,"max":100,"step":1}
b = 67 # @param {"type":"slider","min":-100,"max":100,"step":1}



# Convertir LAB a RGB
Lab = np.array([[[L, a, b]]], dtype=np.float64)
RGB = lab2rgb(Lab)

# RGB ya debería ser una matriz 1D con 3 elementos
R, G, B = RGB[0, 0]

# Crear el string de color en formato hexadecimal y RGB
color_hex = "#{:02x}{:02x}{:02x}".format(int(R), int(G), int(B))
color_rgb = "rgb({},{},{})".format(R, G, B)

# Mostrar el color
show_color(color_hex)

print(f"Valores LAB: L={L}, a={a}, b={b}")
print(f"Valores RGB: R={R}, G={G}, B={B}")
print(f"Color Hexadecimal: {color_hex.upper()}")

"""##Selector de Colores

[Color picker, calculator and generator ](https://colorizer.org/)

[Useful Color Equations ](http://brucelindbloom.com/index.html?LabGamutDisplayHelp.html#IntegerLab)







"""